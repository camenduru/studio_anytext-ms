'''
AnyText: Multilingual Visual Text Generation And Editing
Paper: https://arxiv.org/abs/2311.03054
Code: https://github.com/tyxsspa/AnyText
Copyright (c) Alibaba, Inc. and its affiliates.
'''
import os
from modelscope.pipelines import pipeline
import cv2
import gradio as gr
import numpy as np
import re
from gradio.components import Component
from util import check_channels, resize_image, save_images
import json

BBOX_MAX_NUM = 8
img_save_folder = 'SaveImages'
load_model = True
if load_model:
    inference = pipeline('my-anytext-task', model='damo/cv_anytext_text_generation_editing', model_revision='v1.1.0')


def count_lines(prompt):
    prompt = prompt.replace('‚Äú', '"')
    prompt = prompt.replace('‚Äù', '"')
    p = '"(.*?)"'
    strs = re.findall(p, prompt)
    if len(strs) == 0:
        strs = [' ']
    return len(strs)


def generate_rectangles(w, h, n, max_trys=200):
    img = np.zeros((h, w, 1), dtype=np.uint8)
    rectangles = []
    attempts = 0
    n_pass = 0
    low_edge = int(max(w, h)*0.3 if n <= 3 else max(w, h)*0.2)  # ~150, ~100
    while attempts < max_trys:
        rect_w = min(np.random.randint(max((w*0.5)//n, low_edge), w), int(w*0.8))
        ratio = np.random.uniform(4, 10)
        rect_h = max(low_edge, int(rect_w/ratio))
        rect_h = min(rect_h, int(h*0.8))
        # gen rotate angle
        rotation_angle = 0
        rand_value = np.random.rand()
        if rand_value < 0.7:
            pass
        elif rand_value < 0.8:
            rotation_angle = np.random.randint(0, 40)
        elif rand_value < 0.9:
            rotation_angle = np.random.randint(140, 180)
        else:
            rotation_angle = np.random.randint(85, 95)
        # rand position
        x = np.random.randint(0, w - rect_w)
        y = np.random.randint(0, h - rect_h)
        # get vertex
        rect_pts = cv2.boxPoints(((rect_w/2, rect_h/2), (rect_w, rect_h), rotation_angle))
        rect_pts = np.int32(rect_pts)
        # move
        rect_pts += (x, y)
        # check boarder
        if np.any(rect_pts < 0) or np.any(rect_pts[:, 0] >= w) or np.any(rect_pts[:, 1] >= h):
            attempts += 1
            continue
        # check overlap
        if any(check_overlap_polygon(rect_pts, rp) for rp in rectangles):
            attempts += 1
            continue
        n_pass += 1
        cv2.fillPoly(img, [rect_pts], 255)
        rectangles.append(rect_pts)
        if n_pass == n:
            break
    print("attempts:", attempts)
    if len(rectangles) != n:
        raise gr.Error(f'Failed in auto generate positions after {attempts} attempts, try again!')
    return img


def check_overlap_polygon(rect_pts1, rect_pts2):
    poly1 = cv2.convexHull(rect_pts1)
    poly2 = cv2.convexHull(rect_pts2)
    rect1 = cv2.boundingRect(poly1)
    rect2 = cv2.boundingRect(poly2)
    if rect1[0] + rect1[2] >= rect2[0] and rect2[0] + rect2[2] >= rect1[0] and rect1[1] + rect1[3] >= rect2[1] and rect2[1] + rect2[3] >= rect1[1]:
        return True
    return False


def draw_rects(width, height, rects):
    img = np.zeros((height, width, 1), dtype=np.uint8)
    for rect in rects:
        x1 = int(rect[0] * width)
        y1 = int(rect[1] * height)
        w = int(rect[2] * width)
        h = int(rect[3] * height)
        x2 = x1 + w
        y2 = y1 + h
        cv2.rectangle(img, (x1, y1), (x2, y2), 255, -1)
    return img


def process(mode, prompt, pos_radio, sort_radio, revise_pos, show_debug, draw_img, rect_img, ref_img, ori_img, img_count, ddim_steps, w, h, strength, cfg_scale, seed, eta, a_prompt, n_prompt, *rect_list):
    n_lines = count_lines(prompt)
    # Text Generation
    if mode == 'gen':
        # create pos_imgs
        if pos_radio == 'Manual-draw(ÊâãÁªò)':
            if draw_img is not None:
                pos_imgs = 255 - draw_img['image']
                if 'mask' in draw_img:
                    pos_imgs = pos_imgs.astype(np.float32) + draw_img['mask'][..., 0:3].astype(np.float32)
                    pos_imgs = pos_imgs.clip(0, 255).astype(np.uint8)
            else:
                pos_imgs = np.zeros((w, h, 1))
        elif pos_radio == 'Manual-rect(ÊãñÊ°Ü)':
            rect_check = rect_list[:BBOX_MAX_NUM]
            rect_xywh = rect_list[BBOX_MAX_NUM:]
            checked_rects = []
            for idx, c in enumerate(rect_check):
                if c:
                    _xywh = rect_xywh[4*idx:4*(idx+1)]
                    checked_rects += [_xywh]
            pos_imgs = draw_rects(w, h, checked_rects)
        elif pos_radio == 'Auto-rand(ÈöèÊú∫)':
            pos_imgs = generate_rectangles(w, h, n_lines, max_trys=500)
    # Text Editing
    elif mode == 'edit':
        revise_pos = False  # disable pos revise in edit mode
        if ref_img is None or ori_img is None:
            raise gr.Error('No reference image, please upload one for edit!')
        edit_image = ori_img.clip(1, 255)  # for mask reason
        edit_image = check_channels(edit_image)
        edit_image = resize_image(edit_image, max_length=768)
        h, w = edit_image.shape[:2]
        if isinstance(ref_img, dict) and 'mask' in ref_img and ref_img['mask'].mean() > 0:
            pos_imgs = 255 - edit_image
            edit_mask = cv2.resize(ref_img['mask'][..., 0:3], (w, h))
            pos_imgs = pos_imgs.astype(np.float32) + edit_mask.astype(np.float32)
            pos_imgs = pos_imgs.clip(0, 255).astype(np.uint8)
        else:
            if isinstance(ref_img, dict) and 'image' in ref_img:
                ref_img = ref_img['image']
            pos_imgs = 255 - ref_img  # example input ref_img is used as pos
    cv2.imwrite('pos_imgs.png', 255-pos_imgs[..., ::-1])
    params = {
        "sort_priority": sort_radio,
        "show_debug": show_debug,
        "revise_pos": revise_pos,
        "image_count": img_count,
        "ddim_steps": ddim_steps,
        "image_width": w,
        "image_height": h,
        "strength": strength,
        "cfg_scale": cfg_scale,
        "eta": eta,
        "a_prompt": a_prompt,
        "n_prompt": n_prompt
    }
    input_data = {
        "prompt": prompt,
        "seed": seed,
        "draw_pos": pos_imgs,
        "ori_image": ori_img,
    }
    results, rtn_code, rtn_warning, debug_info = inference(input_data, mode=mode, **params)
    if rtn_code >= 0:
        # save_images(results, img_save_folder)
        # print(f'Done, result images are saved in: {img_save_folder}')
        if rtn_warning:
            gr.Warning(rtn_warning)
    else:
        raise gr.Error(rtn_warning)
    return results, gr.Markdown(debug_info, visible=show_debug)


def create_canvas(w=512, h=512, c=3, line=5):
    image = np.full((h, w, c), 200, dtype=np.uint8)
    for i in range(h):
        if i % (w//line) == 0:
            image[i, :, :] = 150
    for j in range(w):
        if j % (w//line) == 0:
            image[:, j, :] = 150
    image[h//2-8:h//2+8, w//2-8:w//2+8, :] = [200, 0, 0]
    return image


def resize_w(w, img1, img2):
    if isinstance(img2, dict):
        img2 = img2['image']
    return [cv2.resize(img1, (w, img1.shape[0])), cv2.resize(img2, (w, img2.shape[0]))]


def resize_h(h, img1, img2):
    if isinstance(img2, dict):
        img2 = img2['image']
    return [cv2.resize(img1, (img1.shape[1], h)), cv2.resize(img2, (img2.shape[1], h))]


is_t2i = 'true'
block = gr.Blocks(css='style.css', theme=gr.themes.Soft()).queue()

with open('javascript/bboxHint.js', 'r') as file:
    value = file.read()
escaped_value = json.dumps(value)

with block:
    block.load(fn=None,
               _js=f"""() => {{
               const script = document.createElement("script");
               const text =  document.createTextNode({escaped_value});
               script.appendChild(text);
               document.head.appendChild(script);
               }}""")
    gr.HTML('<div style="text-align: center; margin: 20px auto;"> \
            <img id="banner" src="https://modelscope.cn/api/v1/studio/damo/studio_anytext/repo?Revision=master&FilePath=example_images/banner.png&View=true" alt="anytext"> <br>  \
            [<a href="https://arxiv.org/abs/2311.03054" style="color:blue; font-size:18px;">arXiv</a>] \
            [<a href="https://github.com/tyxsspa/AnyText" style="color:blue; font-size:18px;">Code</a>] \
            [<a href="https://modelscope.cn/models/damo/cv_anytext_text_generation_editing/summary" style="color:blue; font-size:18px;">ModelScope</a>]\
            version: 1.1.0 </div>')
    with gr.Row(variant='compact'):
        with gr.Column():
            with gr.Accordion('üïπInstructions(ËØ¥Êòé)', open=False,):
                with gr.Tabs():
                    with gr.Tab("English"):
                        gr.Markdown('<span style="color:navy;font-size:20px">Run Examples</span>')
                        gr.Markdown('<span style="color:black;font-size:16px">AnyText has two modes: Text Generation and Text Editing, and we provides a variety of examples. Select one, click on [Run!] button to run.</span>')
                        gr.Markdown('<span style="color:gray;font-size:12px">Please note, before running examples, ensure the manual draw area is empty, otherwise may get wrong results. Additionally, different examples use \
                                     different parameters (such as resolution, seed, etc.). When generate your own, please pay attention to the parameter changes, or refresh the page to restore the default parameters.</span>')
                        gr.Markdown('<span style="color:navy;font-size:20px">Text Generation</span>')
                        gr.Markdown('<span style="color:black;font-size:16px">Enter the textual description (in Chinese or English) of the image you want to generate in [Prompt]. Each text line that needs to be generated should be \
                                     enclosed in double quotes. Then, manually draw the specified position for each text line to generate the image.</span>\
                                     <span style="color:red;font-size:16px">The drawing of text positions is crucial to the quality of the resulting image</span>, \
                                     <span style="color:black;font-size:16px">please do not draw too casually or too small. The number of positions should match the number of text lines, and the size of each position should be matched \
                                     as closely as possible to the length or width of the corresponding text line. If [Manual-draw] is inconvenient, you can try dragging rectangles [Manual-rect] or random positions [Auto-rand].</span>')
                        gr.Markdown('<span style="color:gray;font-size:12px">When generating multiple lines, each position is matched with the text line according to a certain rule. The [Sort Position] option is used to \
                                     determine whether to prioritize sorting from top to bottom or from left to right. You can open the [Show Debug] option in the parameter settings to observe the text position and glyph image \
                                     in the result. You can also select the [Revise Position] which uses the bounding box of the rendered text as the revised position. However, it is occasionally found that the creativity of the \
                                     generated text is slightly lower using this method.</span>')
                        gr.Markdown('<span style="color:navy;font-size:20px">Text Editing</span>')
                        gr.Markdown('<span style="color:black;font-size:16px">Please upload an image in [Ref] as a reference image, then adjust the brush size, and mark the area(s) to be edited. Input the textual description and \
                                     the new text to be modified in [Prompt], then generate the image.</span>')
                        gr.Markdown('<span style="color:gray;font-size:12px">The reference image can be of any resolution, but it will be internally processed with a limit that the longer side cannot exceed 768 pixels, and the \
                                     width and height will both be scaled to multiples of 64.</span>')
                    with gr.Tab("ÁÆÄ‰Ωì‰∏≠Êñá"):
                        gr.Markdown('<span style="color:navy;font-size:20px">ËøêË°åÁ§∫‰æã</span>')
                        gr.Markdown('<span style="color:black;font-size:16px">AnyTextÊúâ‰∏§ÁßçËøêË°åÊ®°ÂºèÔºöÊñáÂ≠óÁîüÊàêÂíåÊñáÂ≠óÁºñËæëÔºåÊØèÁßçÊ®°Âºè‰∏ãÊèê‰æõ‰∫Ü‰∏∞ÂØåÁöÑÁ§∫‰æãÔºåÈÄâÊã©‰∏Ä‰∏™ÔºåÁÇπÂáª[Run!]Âç≥ÂèØ„ÄÇ</span>')
                        gr.Markdown('<span style="color:gray;font-size:12px">ËØ∑Ê≥®ÊÑèÔºåËøêË°åÁ§∫‰æãÂâçÁ°Æ‰øùÊâãÁªò‰ΩçÁΩÆÂå∫ÂüüÊòØÁ©∫ÁöÑÔºåÈò≤Ê≠¢ÂΩ±ÂìçÁ§∫‰æãÁªìÊûúÔºåÂè¶Â§ñ‰∏çÂêåÁ§∫‰æã‰ΩøÁî®‰∏çÂêåÁöÑÂèÇÊï∞ÔºàÂ¶ÇÂàÜËæ®ÁéáÔºåÁßçÂ≠êÊï∞Á≠âÔºâÔºåÂ¶ÇÊûúË¶ÅËá™Ë°åÁîüÊàêÊó∂ÔºåËØ∑ÁïôÊÑèÂèÇÊï∞ÂèòÂåñÔºåÊàñÂà∑Êñ∞È°µÈù¢ÊÅ¢Â§çÂà∞ÈªòËÆ§ÂèÇÊï∞„ÄÇ</span>')
                        gr.Markdown('<span style="color:navy;font-size:20px">ÊñáÂ≠óÁîüÊàê</span>')
                        gr.Markdown('<span style="color:black;font-size:16px">Âú®Prompt‰∏≠ËæìÂÖ•ÊèèËø∞ÊèêÁ§∫ËØçÔºàÊîØÊåÅ‰∏≠Ëã±ÊñáÔºâÔºåÈúÄË¶ÅÁîüÊàêÁöÑÊØè‰∏ÄË°åÊñáÂ≠óÁî®ÂèåÂºïÂè∑ÂåÖË£πÔºåÁÑ∂Âêé‰æùÊ¨°ÊâãÁªòÊåáÂÆöÊØèË°åÊñáÂ≠óÁöÑ‰ΩçÁΩÆÔºåÁîüÊàêÂõæÁâá„ÄÇ</span>\
                                     <span style="color:red;font-size:16px">ÊñáÂ≠ó‰ΩçÁΩÆÁöÑÁªòÂà∂ÂØπÊàêÂõæË¥®ÈáèÂæàÂÖ≥ÈîÆ</span>, \
                                     <span style="color:black;font-size:16px">ËØ∑‰∏çË¶ÅÁîªÁöÑÂ§™ÈöèÊÑèÊàñÂ§™Â∞èÔºå‰ΩçÁΩÆÁöÑÊï∞ÈáèË¶Å‰∏éÊñáÂ≠óË°åÊï∞Èáè‰∏ÄËá¥ÔºåÊØè‰∏™‰ΩçÁΩÆÁöÑÂ∞∫ÂØ∏Ë¶Å‰∏éÂØπÂ∫îÁöÑÊñáÂ≠óË°åÁöÑÈïøÁü≠ÊàñÂÆΩÈ´òÂ∞ΩÈáèÂåπÈÖç„ÄÇÂ¶ÇÊûúÊâãÁªòÔºàManual-drawÔºâ‰∏çÊñπ‰æøÔºå\
                                     ÂèØ‰ª•Â∞ùËØïÊãñÊ°ÜÁü©ÂΩ¢ÔºàManual-rectÔºâÊàñÈöèÊú∫ÁîüÊàêÔºàAuto-randÔºâ„ÄÇ</span>')
                        gr.Markdown('<span style="color:gray;font-size:12px">Â§öË°åÁîüÊàêÊó∂ÔºåÊØè‰∏™‰ΩçÁΩÆÊåâÁÖß‰∏ÄÂÆöËßÑÂàôÊéíÂ∫èÂêé‰∏éÊñáÂ≠óË°åÂÅöÂØπÂ∫îÔºåSort PositionÈÄâÈ°πÁî®‰∫éÁ°ÆÂÆöÊéíÂ∫èÊó∂‰ºòÂÖà‰ªé‰∏äÂà∞‰∏ãËøòÊòØ‰ªéÂ∑¶Âà∞Âè≥„ÄÇ\
                                     ÂèØ‰ª•Âú®ÂèÇÊï∞ËÆæÁΩÆ‰∏≠ÊâìÂºÄShow DebugÈÄâÈ°πÔºåÂú®ÁªìÊûúÂõæÂÉè‰∏≠ËßÇÂØüÊñáÂ≠ó‰ΩçÁΩÆÂíåÂ≠óÂΩ¢Âõæ„ÄÇ‰πüÂèØ‰ª•ÂãæÈÄâRevise PositionÈÄâÈ°πÔºåËøôÊ†∑‰ºöÁî®Ê∏≤ÊüìÊñáÂ≠óÁöÑÂ§ñÊé•Áü©ÂΩ¢‰Ωú‰∏∫‰øÆÊ≠£ÂêéÁöÑ‰ΩçÁΩÆÔºå‰∏çËøáÂÅ∂Â∞îÂèëÁé∞ËøôÊ†∑ÁîüÊàêÁöÑÊñáÂ≠óÂàõÈÄ†ÊÄßÁï•‰Ωé„ÄÇ</span>')
                        gr.Markdown('<span style="color:navy;font-size:20px">ÊñáÂ≠óÁºñËæë</span>')
                        gr.Markdown('<span style="color:black;font-size:16px">ËØ∑‰∏ä‰º†‰∏ÄÂº†ÂæÖÁºñËæëÁöÑÂõæÁâá‰Ωú‰∏∫ÂèÇËÄÉÂõæ(Ref)ÔºåÁÑ∂ÂêéË∞ÉÊï¥Á¨îËß¶Â§ßÂ∞èÂêéÔºåÂú®ÂèÇËÄÉÂõæ‰∏äÊ∂ÇÊäπË¶ÅÁºñËæëÁöÑ‰ΩçÁΩÆÔºåÂú®Prompt‰∏≠ËæìÂÖ•ÊèèËø∞ÊèêÁ§∫ËØçÂíåË¶Å‰øÆÊîπÁöÑÊñáÂ≠óÂÜÖÂÆπÔºåÁîüÊàêÂõæÁâá„ÄÇ</span>')
                        gr.Markdown('<span style="color:gray;font-size:12px">ÂèÇËÄÉÂõæÂèØ‰ª•‰∏∫‰ªªÊÑèÂàÜËæ®ÁéáÔºå‰ΩÜÂÜÖÈÉ®Â§ÑÁêÜÊó∂‰ºöÈôêÂà∂ÈïøËæπ‰∏çËÉΩË∂ÖËøá768ÔºåÂπ∂‰∏îÂÆΩÈ´òÈÉΩË¢´Áº©Êîæ‰∏∫64ÁöÑÊï¥Êï∞ÂÄç„ÄÇ</span>')
            with gr.Accordion('üõ†Parameters(ÂèÇÊï∞)', open=False):
                with gr.Row(variant='compact'):
                    img_count = gr.Slider(label="Image Count(ÂõæÁâáÊï∞)", minimum=1, maximum=12, value=4, step=1)
                    ddim_steps = gr.Slider(label="Steps(Ê≠•Êï∞)", minimum=1, maximum=100, value=20, step=1)
                with gr.Row(variant='compact'):
                    image_width = gr.Slider(label="Image Width(ÂÆΩÂ∫¶)", minimum=256, maximum=768, value=512, step=64)
                    image_height = gr.Slider(label="Image Height(È´òÂ∫¶)", minimum=256, maximum=768, value=512, step=64)
                with gr.Row(variant='compact'):
                    strength = gr.Slider(label="Strength(ÊéßÂà∂ÂäõÂ∫¶)", minimum=0.0, maximum=2.0, value=1.0, step=0.01)
                    cfg_scale = gr.Slider(label="CFG-Scale(CFGÂº∫Â∫¶)", minimum=0.1, maximum=30.0, value=9.0, step=0.1)
                with gr.Row(variant='compact'):
                    seed = gr.Slider(label="Seed(ÁßçÂ≠êÊï∞)", minimum=-1, maximum=99999999, step=1, randomize=False, value=-1)
                    eta = gr.Number(label="eta (DDIM)", value=0.0)
                with gr.Row(variant='compact'):
                    show_debug = gr.Checkbox(label='Show Debug(Ë∞ÉËØï‰ø°ÊÅØ)', value=False)
                    gr.Markdown('<span style="color:silver;font-size:12px">whether show glyph image and debug information in the result(ÊòØÂê¶Âú®ÁªìÊûú‰∏≠ÊòæÁ§∫glyphÂõæ‰ª•ÂèäË∞ÉËØï‰ø°ÊÅØ)</span>')
                a_prompt = gr.Textbox(label="Added Prompt(ÈôÑÂä†ÊèêÁ§∫ËØç)", value='best quality, extremely detailed,4k, HD, supper legible text,  clear text edges,  clear strokes, neat writing, no watermarks')
                n_prompt = gr.Textbox(label="Negative Prompt(Ë¥üÂêëÊèêÁ§∫ËØç)", value='low-res, bad anatomy, extra digit, fewer digits, cropped, worst quality, low quality, watermark, unreadable text, messy words, distorted text, disorganized writing, advertising picture')
            prompt = gr.Textbox(label="Prompt(ÊèêÁ§∫ËØç)")
            with gr.Tabs() as tab_modes:
                with gr.Tab("üñºText Generation(ÊñáÂ≠óÁîüÊàê)", elem_id='MD-tab-t2i') as mode_gen:
                    pos_radio = gr.Radio(["Manual-draw(ÊâãÁªò)", "Manual-rect(ÊãñÊ°Ü)", "Auto-rand(ÈöèÊú∫)"], value='Manual-draw(ÊâãÁªò)', label="Pos-Method(‰ΩçÁΩÆÊñπÂºè)", info="choose a method to specify text positions(ÈÄâÊã©ÊñπÊ≥ïÁî®‰∫éÊåáÂÆöÊñáÂ≠ó‰ΩçÁΩÆ).")
                    with gr.Row():
                        sort_radio = gr.Radio(["‚Üï", "‚Üî"], value='‚Üï', label="Sort Position(‰ΩçÁΩÆÊéíÂ∫è)", info="position sorting priority(‰ΩçÁΩÆÊéíÂ∫èÊó∂ÁöÑ‰ºòÂÖàÁ∫ß)")
                        revise_pos = gr.Checkbox(label='Revise Position(‰øÆÊ≠£‰ΩçÁΩÆ)', value=False)
                        # gr.Markdown('<span style="color:silver;font-size:12px">try to revise according to text\'s bounding rectangle(Â∞ùËØïÈÄöËøáÊ∏≤ÊüìÂêéÁöÑÊñáÂ≠óË°åÁöÑÂ§ñÊé•Áü©ÂΩ¢Ê°Ü‰øÆÊ≠£‰ΩçÁΩÆ)</span>')
                    with gr.Row(variant='compact'):
                        rect_cb_list: list[Component] = []
                        rect_xywh_list: list[Component] = []
                        for i in range(BBOX_MAX_NUM):
                            e = gr.Checkbox(label=f'{i}', value=False, visible=False, min_width='10')
                            x = gr.Slider(label='x', value=0.4, minimum=0.0, maximum=1.0, step=0.0001, elem_id=f'MD-t2i-{i}-x', visible=False)
                            y = gr.Slider(label='y', value=0.4, minimum=0.0, maximum=1.0, step=0.0001, elem_id=f'MD-t2i-{i}-y',  visible=False)
                            w = gr.Slider(label='w', value=0.2, minimum=0.0, maximum=1.0, step=0.0001, elem_id=f'MD-t2i-{i}-w',  visible=False)
                            h = gr.Slider(label='h', value=0.2, minimum=0.0, maximum=1.0, step=0.0001, elem_id=f'MD-t2i-{i}-h',  visible=False)
                            x.change(fn=None, inputs=x, outputs=x, _js=f'v => onBoxChange({is_t2i}, {i}, "x", v)', show_progress=False, queue=False)
                            y.change(fn=None, inputs=y, outputs=y, _js=f'v => onBoxChange({is_t2i}, {i}, "y", v)', show_progress=False, queue=False)
                            w.change(fn=None, inputs=w, outputs=w, _js=f'v => onBoxChange({is_t2i}, {i}, "w", v)', show_progress=False, queue=False)
                            h.change(fn=None, inputs=h, outputs=h, _js=f'v => onBoxChange({is_t2i}, {i}, "h", v)', show_progress=False, queue=False)

                            e.change(fn=None, inputs=e, outputs=e, _js=f'e => onBoxEnableClick({is_t2i}, {i}, e)', queue=False)
                            rect_cb_list.extend([e])
                            rect_xywh_list.extend([x, y, w, h])

                    rect_img = gr.Image(value=create_canvas(), label="Rext Position(ÊñπÊ°Ü‰ΩçÁΩÆ)", elem_id="MD-bbox-rect-t2i", show_label=False, visible=False)
                    draw_img = gr.Image(value=create_canvas(), label="Draw Position(ÁªòÂà∂‰ΩçÁΩÆ)", visible=True, tool='sketch', show_label=False, brush_radius=60)

                    def re_draw():
                        return [gr.Image(value=create_canvas(), tool='sketch'), gr.Slider(value=512), gr.Slider(value=512)]
                    draw_img.clear(re_draw, None, [draw_img, image_width, image_height])
                    image_width.release(resize_w, [image_width, rect_img, draw_img], [rect_img, draw_img])
                    image_height.release(resize_h, [image_height, rect_img, draw_img], [rect_img, draw_img])

                    def change_options(selected_option):
                        return [gr.Checkbox(visible=selected_option == 'Manual-rect(ÊãñÊ°Ü)')] * BBOX_MAX_NUM + \
                                [gr.Image(visible=selected_option == 'Manual-rect(ÊãñÊ°Ü)'),
                                 gr.Image(visible=selected_option == 'Manual-draw(ÊâãÁªò)'),
                                 gr.Radio(visible=selected_option != 'Auto-rand(ÈöèÊú∫)'),
                                 gr.Checkbox(value=selected_option == 'Auto-rand(ÈöèÊú∫)')]
                    pos_radio.change(change_options, pos_radio, rect_cb_list + [rect_img, draw_img, sort_radio, revise_pos], show_progress=False, queue=False)
                    with gr.Row():
                        gr.Markdown("")
                        run_gen = gr.Button(value="Run(ËøêË°å)!", scale=0.3, elem_classes='run')
                        gr.Markdown("")

                    def exp_gen_click():
                        return [gr.Slider(value=512), gr.Slider(value=512)]  # all examples are 512x512, refresh draw_img
                    exp_gen = gr.Examples(
                        [
                            ['‰∏ÄÂè™Êµ£ÁÜäÁ´ôÂú®ÈªëÊùøÂâçÔºå‰∏äÈù¢ÂÜôÁùÄ"Ê∑±Â∫¶Â≠¶‰π†"', "example_images/gen1.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 81808278],
                            ['‰∏Ä‰∏™ÂÑøÁ´•Ëú°Á¨îÁîªÔºåÊ£ÆÊûóÈáåÊúâ‰∏Ä‰∏™ÂèØÁà±ÁöÑËòëËèáÂΩ¢Áä∂ÁöÑÊàøÂ≠êÔºåÊ†áÈ¢òÊòØ"Ê£ÆÊûóÂ∞èÂ±ã"', "example_images/gen16.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 40173333],
                            ['‰∏Ä‰∏™Á≤æÁæéËÆæËÆ°ÁöÑlogoÔºåÁîªÁöÑÊòØ‰∏Ä‰∏™ÈªëÁôΩÈ£éÊ†ºÁöÑÂé®Â∏àÔºåÂ∏¶ÁùÄÂé®Â∏àÂ∏ΩÔºålogo‰∏ãÊñπÂÜôÁùÄ‚ÄúÊ∑±Â§úÈ£üÂ†Ç‚Äù', "example_images/gen14.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 6970544],
                            ['photo of caramel macchiato coffee on the table, top-down perspective, with "Any" "Text" written on it using cream', "example_images/gen9.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 66273235],
                            ['‰∏ÄÂº†Êà∑Â§ñÈõ™Âú∞Èù¥ÁöÑÁîµÂïÜÂπøÂëäÔºå‰∏äÈù¢ÂÜôÁùÄ ‚ÄúÂèå12Â§ß‰øÉÔºÅ‚ÄùÔºå‚ÄúÁ´ãÂáè50‚ÄùÔºå‚ÄúÂä†ÁªíÂä†Âéö‚ÄùÔºå‚ÄúÁ©øËÑ±Êñπ‰æø‚ÄùÔºå‚ÄúÊ∏©Êöñ24Â∞èÊó∂ÈÄÅËææ‚ÄùÔºå ‚ÄúÂåÖÈÇÆ‚ÄùÔºåÈ´òÁ∫ßËÆæËÆ°ÊÑüÔºåÁ≤æÁæéÊûÑÂõæ', "example_images/gen15.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 66980376],
                            ['Sign on the clean building that reads "ÁßëÂ≠¶" and "Í≥ºÌïô"  and "„Çπ„ÉÜ„ÉÉ„Éó" and "SCIENCE"', "example_images/gen6.png", "Manual-draw(ÊâãÁªò)", "‚Üï", True, 4, 13246309],
                            ['‰∏Ä‰∏™Á≤æËá¥ÁöÑÈ©¨ÂÖãÊùØÔºå‰∏äÈù¢ÈõïÂàªÁùÄ‰∏ÄÈ¶ñ‰∏≠ÂõΩÂè§ËØóÔºåÂÜÖÂÆπÊòØ "Ëä±ËêΩÁü•Â§öÂ∞ë" "Â§úÊù•È£éÈõ®Â£∞" "Â§ÑÂ§ÑÈóªÂïºÈ∏ü" "Êò•Áú†‰∏çËßâÊôì"', "example_images/gen3.png", "Manual-draw(ÊâãÁªò)", "‚Üî", False, 4, 60358279],
                            ['A delicate square cake, cream and fruit, with "CHEERS" "to the" and "GRADUATE" written in chocolate', "example_images/gen8.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 93424638],
                            ['‰∏Ä‰ª∂Á≤æÁæéÁöÑÊØõË°£Ôºå‰∏äÈù¢ÊúâÈíàÁªáÁöÑÊñáÂ≠óÔºö"ÈÄö‰πâ‰∏πÈùí"', "example_images/gen4.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 48769450],
                            ['‰∏Ä‰∏™ÂèåËÇ©ÂåÖÁöÑÁâπÂÜôÁÖßÔºå‰∏äÈù¢Áî®ÈíàÁªáÊñáÂ≠óÂÜôÁùÄ‚Äù‰∏∫‰∫ÜÊó†Ê≥ï‚Äú ‚ÄùËÆ°ÁÆóÁöÑ‰ª∑ÂÄº‚Äú', "example_images/gen12.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 35552323],
                            ['A nice drawing in pencil of Michael Jackson,  with the words "Micheal" and "Jackson" written on it', "example_images/gen7.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 83866922],
                            ['‰∏Ä‰∏™ÊºÇ‰∫ÆÁöÑËú°Á¨îÁîªÔºåÊúâË°åÊòüÔºåÂÆáËà™ÂëòÔºåËøòÊúâÂÆáÂÆôÈ£ûËàπÔºå‰∏äÈù¢ÂÜôÁöÑÊòØ"ÂéªÁÅ´ÊòüÊóÖË°å", "ÁéãÂ∞èÊòé", "11Êúà1Êó•"', "example_images/gen5.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 42328250],
                            ['‰∏Ä‰∏™Ë£ÖÈ•∞Âçé‰∏ΩÁöÑËõãÁ≥ïÔºå‰∏äÈù¢Áî®Â•∂Ê≤πÂÜôÁùÄ‚ÄúÈòøÈáå‰∫ë‚ÄùÂíå"APSARA"', "example_images/gen13.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 62357019],
                            ['‰∏ÄÂº†ÂÖ≥‰∫éÂ¢ô‰∏äÁöÑÂΩ©Ëâ≤Ê∂ÇÈ∏¶Ëâ∫ÊúØÁöÑÊëÑÂΩ±‰ΩúÂìÅÔºå‰∏äÈù¢ÂÜôÁùÄ‚Äú‰∫∫Â∑•Êô∫ËÉΩ" Âíå "Á•ûÁªèÁΩëÁªú"', "example_images/gen10.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 64722007],
                            ['‰∏ÄÊûö‰∏≠ÂõΩÂè§‰ª£ÈìúÈí±,  ‰∏äÈù¢ÁöÑÊñáÂ≠óÊòØ "Â∫∑"  "ÂØ∂" "ÈÄö" "ÁÜô"', "example_images/gen2.png", "Manual-draw(ÊâãÁªò)", "‚Üï", False, 4, 24375031],
                            ['a well crafted ice sculpture that made with "Happy" and "Holidays". Dslr photo, perfect illumination', "example_images/gen11.png", "Manual-draw(ÊâãÁªò)", "‚Üï", True, 4, 64901362],
                        ],
                        [prompt, draw_img, pos_radio, sort_radio, revise_pos, img_count, seed],
                        examples_per_page=5,
                    )
                    exp_gen.dataset.click(exp_gen_click, None, [image_width, image_height])

                with gr.Tab("üé®Text Editing(ÊñáÂ≠óÁºñËæë)") as mode_edit:
                    with gr.Row(variant='compact'):
                        ref_img = gr.Image(label='Ref(ÂèÇËÄÉÂõæ)', source='upload')
                        ori_img = gr.Image(label='Ori(ÂéüÂõæ)')

                    def upload_ref(x):
                        return [gr.Image(type="numpy", brush_radius=60, tool='sketch'),
                                gr.Image(value=x)]

                    def clear_ref(x):
                        return gr.Image(source='upload', tool=None)
                    ref_img.upload(upload_ref, ref_img, [ref_img, ori_img])
                    ref_img.clear(clear_ref, ref_img, ref_img)
                    with gr.Row():
                        gr.Markdown("")
                        run_edit = gr.Button(value="Run(ËøêË°å)!", scale=0.3, elem_classes='run')
                        gr.Markdown("")
                    gr.Examples(
                        [
                            ['Á≤æÁæéÁöÑ‰π¶Ê≥ï‰ΩúÂìÅÔºå‰∏äÈù¢ÂÜôÁùÄ‚ÄúÂøó‚Äù ‚ÄúÂ≠ò‚Äù ‚ÄúÈ´ò‚Äù ‚ÄùËøú‚Äú', "example_images/ref10.jpg", "example_images/edit10.png", 4, 98053044],
                            ['‰∏Ä‰∏™Ë°®ÊÉÖÂåÖÔºåÂ∞èÁå™ËØ¥ "‰∏ãÁè≠"', "example_images/ref2.jpg", "example_images/edit2.png", 2, 43304008],
                            ['Characters written in chalk on the blackboard that says "DADDY"', "example_images/ref8.jpg", "example_images/edit8.png", 4, 73556391],
                            ['‰∏Ä‰∏™‰∏≠ÂõΩÂè§‰ª£ÈìúÈí±Ôºå‰∏äÈù¢ÂÜôÁùÄ"‰πæ" "ÈöÜ"', "example_images/ref12.png", "example_images/edit12.png", 4, 89159482],
                            ['ÈªëÊùø‰∏äÂÜôÁùÄ"Here"', "example_images/ref11.jpg", "example_images/edit11.png", 2, 15353513],
                            ['A letter picture that says "THER"', "example_images/ref6.jpg", "example_images/edit6.png", 4, 72321415],
                            ['‰∏ÄÂ†ÜÊ∞¥Êûú, ‰∏≠Èó¥ÂÜôÁùÄ‚ÄúUIT‚Äù', "example_images/ref13.jpg", "example_images/edit13.png", 4, 54263567],
                            ['‰∏Ä‰∏™Êº´ÁîªÔºå‰∏äÈù¢ÂÜôÁùÄ" "', "example_images/ref14.png", "example_images/edit14.png", 4, 94081527],
                            ['‰∏Ä‰∏™ÈªÑËâ≤Ê†áÂøóÁâåÔºå‰∏äËæπÂÜôÁùÄ"‰∏çË¶Å" Âíå "Â§ßÊÑè"', "example_images/ref3.jpg", "example_images/edit3.png", 2, 64010349],
                            ['A cake with colorful characters that reads "EVERYDAY"', "example_images/ref7.jpg", "example_images/edit7.png", 4, 8943410],
                            ['‰∏Ä‰∏™ÈùíÈìúÈºéÔºå‰∏äÈù¢ÂÜôÁùÄ"  "Âíå"  "', "example_images/ref4.jpg", "example_images/edit4.png", 4, 71139289],
                            ['‰∏Ä‰∏™Âª∫Á≠ëÁâ©ÂâçÈù¢ÁöÑÂ≠óÊØçÊ†áÁâåÔºå ‰∏äÈù¢ÂÜôÁùÄ " "', "example_images/ref5.jpg", "example_images/edit5.png", 4, 50416289],
                        ],
                        [prompt, ori_img, ref_img, img_count, seed],
                        examples_per_page=5,
                    )
        with gr.Column():
            result_gallery = gr.Gallery(label='Result(ÁªìÊûú)', show_label=True, preview=True, columns=2, allow_preview=True, height=600)
            result_info = gr.Markdown('', visible=False)
    ips = [prompt, pos_radio, sort_radio, revise_pos, show_debug, draw_img, rect_img, ref_img, ori_img, img_count, ddim_steps, image_width, image_height, strength, cfg_scale, seed, eta, a_prompt, n_prompt, *(rect_cb_list+rect_xywh_list)]
    run_gen.click(fn=process, inputs=[gr.State('gen')] + ips, outputs=[result_gallery, result_info])
    run_edit.click(fn=process, inputs=[gr.State('edit')] + ips, outputs=[result_gallery, result_info])

block.launch(
    server_name='0.0.0.0' if os.getenv('GRADIO_LISTEN', '') != '' else "127.0.0.1",
    share=True,
    root_path=f"/{os.getenv('GRADIO_PROXY_PATH')}" if os.getenv('GRADIO_PROXY_PATH') else ""
)
# block.launch(server_name='0.0.0.0')
